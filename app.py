
from flask import Flask, render_template, request, jsonify, session
import sqlite3
import hashlib
from datetime import datetime
import os
import random

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'dev-secret-key-12345')
app.config['DATABASE'] = 'messenger.db'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò-–±–æ—Ç–∞
AI_BOT_ENABLED = True
AI_BOT_NAME = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
AI_BOT_ID = 0

def get_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(app.config['DATABASE'])
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        cursor = db.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                phone TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER NOT NULL,
                receiver_id INTEGER NOT NULL,
                message_text TEXT NOT NULL,
                is_read INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (sender_id) REFERENCES users (id),
                FOREIGN KEY (receiver_id) REFERENCES users (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            test_users = [
                ('alex', '+79161234567', hash_password('password123')),
                ('maria', '+79269876543', hash_password('password123')),
                ('ivan', '+79031112233', hash_password('password123'))
            ]
            
            for username, phone, pwd_hash in test_users:
                try:
                    cursor.execute(
                        "INSERT INTO users (username, phone, password_hash) VALUES (?, ?, ?)",
                        (username, phone, pwd_hash)
                    )
                except sqlite3.IntegrityError:
                    pass
        
        db.commit()
        db.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def hash_password(password):
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    return hashlib.sha256(password.encode()).hexdigest()

def ai_bot_response(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò-–±–æ—Ç–∞"""
    try:
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        elif any(word in message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã']):
            return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."
        
        elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help']):
            return "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!"
        
        elif any(word in message_lower for word in ['–ø–æ–≥–æ–¥–∞', 'weather']):
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –æ –ø–æ–≥–æ–¥–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
        
        elif any(word in message_lower for word in ['–≤—Ä–µ–º—è', 'time']):
            current_time = datetime.now().strftime("%H:%M:%S")
            return f"–°–µ–π—á–∞—Å {current_time}."
        
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            return "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º."
        
        elif any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è']):
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ñ–¥—É –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è."
        
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                "–ü–æ–Ω—è—Ç–Ω–æ. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?",
                "–Ø –µ—â–µ —É—á—É—Å—å –ø–æ–Ω–∏–º–∞—Ç—å –ª—é–¥–µ–π. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?",
                "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª. –ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –∏–Ω–∞—á–µ?",
                "–ó–∞–ø–∏—Å—ã–≤–∞—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß—Ç–æ –µ—â–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—Å—É–¥–∏—Ç—å?"
            ]
            return random.choice(responses)
            
    except Exception as e:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return '''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üí¨ Web Messenger</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: Arial, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                height: 100vh;
            }
            
            /* –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è */
            .auth-container { 
                display: flex; 
                justify-content: center; 
                align-items: center; 
                height: 100vh; 
            }
            .auth-box { 
                background: white; 
                padding: 30px; 
                border-radius: 15px; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
                width: 100%; 
                max-width: 400px; 
            }
            .auth-tabs { 
                display: flex; 
                margin-bottom: 20px; 
                border-bottom: 2px solid #ddd; 
            }
            .auth-tab { 
                flex: 1; 
                padding: 15px; 
                text-align: center; 
                cursor: pointer; 
                border-bottom: 3px solid transparent; 
            }
            .auth-tab.active { 
                border-bottom-color: #667eea; 
                color: #667eea; 
                font-weight: bold; 
            }
            .auth-form { 
                display: none; 
            }
            .auth-form.active { 
                display: block; 
            }
            input { 
                width: 100%; 
                padding: 12px; 
                margin: 10px 0; 
                border: 2px solid #ddd; 
                border-radius: 8px; 
                font-size: 16px; 
            }
            input:focus { 
                outline: none; 
                border-color: #667eea; 
            }
            button { 
                width: 100%; 
                padding: 12px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; 
                border: none; 
                border-radius: 8px; 
                font-size: 16px; 
                cursor: pointer; 
                margin: 10px 0; 
            }
            button:hover { 
                opacity: 0.9; 
            }
            .error { 
                color: #e74c3c; 
                text-align: center; 
                margin: 10px 0; 
                padding: 10px; 
                background: #f8d7da; 
                border-radius: 5px; 
                display: none;
            }
            
            /* –ß–∞—Ç */
            .chat-container { 
                display: none; 
                background: white; 
                border-radius: 15px; 
                overflow: hidden; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
                height: 100%;
                flex-direction: column;
            }
            .header { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; 
                padding: 15px 20px; 
                display: flex; 
                justify-content: space-between; 
                align-items: center; 
            }
            .chat-layout { 
                display: flex; 
                height: calc(100% - 60px); 
            }
            .sidebar { 
                width: 250px; 
                background: #f8f9fa; 
                border-right: 1px solid #ddd; 
                overflow-y: auto; 
            }
            .sidebar-header { 
                padding: 15px; 
                border-bottom: 1px solid #ddd; 
            }
            .user-list { 
                padding: 10px; 
            }
            .user-item { 
                padding: 12px; 
                margin: 5px 0; 
                background: white; 
                border-radius: 8px; 
                cursor: pointer; 
                display: flex;
                align-items: center;
            }
            .user-item:hover { 
                background: #667eea; 
                color: white; 
            }
            .user-item.active { 
                background: #667eea; 
                color: white; 
            }
            .user-avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 10px;
                color: white;
                font-weight: bold;
            }
            .ai-bot .user-avatar {
                background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
            }
            .chat-main { 
                flex: 1; 
                display: flex; 
                flex-direction: column; 
            }
            .chat-header { 
                padding: 15px; 
                background: white; 
                border-bottom: 1px solid #ddd; 
            }
            .messages-container { 
                flex: 1; 
                padding: 20px; 
                overflow-y: auto; 
                background: #f8f9fa;
            }
            .message { 
                max-width: 70%; 
                margin: 10px 0; 
                padding: 12px 16px; 
                border-radius: 18px; 
            }
            .message-own { 
                background: #667eea; 
                color: white; 
                margin-left: auto; 
                border-bottom-right-radius: 5px; 
            }
            .message-other { 
                background: white; 
                color: #333; 
                margin-right: auto; 
                border-bottom-left-radius: 5px; 
                border: 1px solid #ddd; 
            }
            .message-bot {
                background: #4CAF50;
                color: white;
            }
            .message-input { 
                padding: 15px; 
                background: white; 
                border-top: 1px solid #ddd; 
                display: flex;
            }
            .message-input input { 
                flex: 1; 
                margin-right: 10px; 
            }
            .logout-btn { 
                background: #e74c3c; 
                padding: 8px 15px; 
                border-radius: 5px; 
                border: none;
                color: white;
                cursor: pointer;
            }
            
            /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
            @media (max-width: 768px) {
                .container {
                    padding: 10px;
                }
                .chat-layout {
                    flex-direction: column;
                    height: calc(100% - 60px);
                }
                .sidebar {
                    width: 100%;
                    height: 30%;
                    border-right: none;
                    border-bottom: 1px solid #ddd;
                }
                .message {
                    max-width: 85%;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="auth-container" id="authSection">
                <div class="auth-box">
                    <div class="auth-tabs">
                        <div class="auth-tab active" onclick="showTab('login')">–í—Ö–æ–¥</div>
                        <div class="auth-tab" onclick="showTab('register')">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</div>
                    </div>
                    
                    <div class="auth-form active" id="loginForm">
                        <h2>üîê –í—Ö–æ–¥</h2>
                        <div id="loginError" class="error"></div>
                        <input type="text" id="loginUsername" placeholder="–õ–æ–≥–∏–Ω" value="alex">
                        <input type="password" id="loginPassword" placeholder="–ü–∞—Ä–æ–ª—å" value="password123">
                        <button onclick="login()">–í–æ–π—Ç–∏</button>
                    </div>
                    
                    <div class="auth-form" id="registerForm">
                        <h2>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
                        <div id="registerError" class="error"></div>
                        <input type="text" id="regUsername" placeholder="–õ–æ–≥–∏–Ω">
                        <input type="text" id="regPhone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω">
                        <input type="password" id="regPassword" placeholder="–ü–∞—Ä–æ–ª—å">
                        <input type="password" id="regConfirm" placeholder="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è">
                        <button onclick="register()">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                    </div>
                </div>
            </div>

            <div class="chat-container" id="chatSection">
                <div class="header">
                    <h2>üí¨ Web Messenger - <span id="currentUsername"></span></h2>
                    <button class="logout-btn" onclick="logout()">üö™ –í—ã–π—Ç–∏</button>
                </div>
                
                <div class="chat-layout">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        </div>
                        <div class="user-list" id="userList"></div>
                    </div>
                    
                    <div class="chat-main">
                        <div class="chat-header">
                            <h3 id="chatTitle">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞</h3>
                        </div>
                        
                        <div class="messages-container" id="messagesContainer"></div>
                        
                        <div class="message-input" id="messageInput">
                            <input type="text" id="messageText" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." onkeypress="if(event.key === 'Enter') sendMessage()">
                            <button onclick="sendMessage()">üì§</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let currentUser = null;
            let selectedUserId = null;
            let refreshInterval = null;
            
            async function checkAuth() {
                try {
                    const response = await fetch('/api/check_auth');
                    const data = await response.json();
                    
                    if (data.success) {
                        currentUser = data.username;
                        showChat();
                        loadUsers();
                    } else {
                        showAuth();
                    }
                } catch (error) {
                    showAuth();
                }
            }
            
            function showTab(tabName) {
                document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
                document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
                
                if (tabName === 'login') {
                    document.querySelector('.auth-tab:first-child').classList.add('active');
                    document.getElementById('loginForm').classList.add('active');
                } else {
                    document.querySelector('.auth-tab:last-child').classList.add('active');
                    document.getElementById('registerForm').classList.add('active');
                }
            }
            
            function showAuth() {
                document.getElementById('authSection').style.display = 'flex';
                document.getElementById('chatSection').style.display = 'none';
                if (refreshInterval) clearInterval(refreshInterval);
            }
            
            function showChat() {
                document.getElementById('authSection').style.display = 'none';
                document.getElementById('chatSection').style.display = 'block';
                document.getElementById('currentUsername').textContent = currentUser;
                // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                document.getElementById('messageInput').style.display = 'none';
            }
            
            async function login() {
                const username = document.getElementById('loginUsername').value;
                const password = document.getElementById('loginPassword').value;
                
                try {
                    const response = await fetch('/api/login', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ username, password })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        currentUser = data.username;
                        showChat();
                        loadUsers();
                    } else {
                        showError('loginError', data.error);
                    }
                } catch (error) {
                    showError('loginError', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                }
            }
            
            async function register() {
                const username = document.getElementById('regUsername').value;
                const phone = document.getElementById('regPhone').value;
                const password = document.getElementById('regPassword').value;
                const confirm = document.getElementById('regConfirm').value;
                
                try {
                    const response = await fetch('/api/register', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ username, phone, password, confirm })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        showTab('login');
                        alert(data.message);
                    } else {
                        showError('registerError', data.error);
                    }
                } catch (error) {
                    showError('registerError', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
                }
            }
            
            async function logout() {
                await fetch('/api/logout');
                currentUser = null;
                selectedUserId = null;
                showAuth();
            }
            
            async function loadUsers() {
                try {
                    const response = await fetch('/api/users');
                    const data = await response.json();
                    
                    if (data.success) {
                        const userList = document.getElementById('userList');
                        userList.innerHTML = '';
                        
                        data.users.forEach(user => {
                            const userElement = document.createElement('div');
                            userElement.className = 'user-item';
                            if (user.id === 0) {
                                userElement.classList.add('ai-bot');
                            }
                            
                            const firstLetter = user.username.charAt(0).toUpperCase();
                            userElement.innerHTML = `
                                <div class="user-avatar">${firstLetter}</div>
                                <div>${user.username}</div>
                            `;
                            
                            userElement.onclick = () => selectUser(user.id, user.username);
                            userList.appendChild(userElement);
                        });
                    }
                } catch (error) {
                    console.error('Failed to load users:', error);
                }
            }
            
            async function selectUser(userId, username) {
                // –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
                document.querySelectorAll('.user-item').forEach(item => item.classList.remove('active'));
                event.currentTarget.classList.add('active');
                
                selectedUserId = userId;
                
                document.getElementById('chatTitle').textContent = `üí¨ –ß–∞—Ç —Å ${username}`;
                // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                document.getElementById('messageInput').style.display = 'flex';
                
                await loadMessages();
                
                if (refreshInterval) clearInterval(refreshInterval);
                refreshInterval = setInterval(loadMessages, 2000);
            }
            
            async function loadMessages() {
                if (!selectedUserId) return;
                
                try {
                    const response = await fetch(`/api/messages?user_id=${selectedUserId}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        const messagesContainer = document.getElementById('messagesContainer');
                        messagesContainer.innerHTML = '';
                        
                        if (data.messages.length === 0 && selectedUserId == 0) {
                            const welcomeMsg = document.createElement('div');
                            welcomeMsg.className = 'message message-bot';
                            welcomeMsg.innerHTML = '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!';
                            messagesContainer.appendChild(welcomeMsg);
                        } else {
                            data.messages.forEach(msg => {
                                const messageElement = document.createElement('div');
                                messageElement.className = `message ${msg.is_own ? 'message-own' : 'message-other'}`;
                                messageElement.textContent = msg.message_text;
                                messagesContainer.appendChild(messageElement);
                            });
                        }
                        
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }
                } catch (error) {
                    console.error('Failed to load messages:', error);
                }
            }
            
            async function sendMessage() {
                const messageText = document.getElementById('messageText').value.trim();
                if (!messageText || !selectedUserId) return;
                
                try {
                    const response = await fetch('/api/send_message', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({ receiver_id: selectedUserId, message_text: messageText })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        document.getElementById('messageText').value = '';
                        if (data.bot_response) {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
                            setTimeout(() => {
                                const messagesContainer = document.getElementById('messagesContainer');
                                const botMessage = document.createElement('div');
                                botMessage.className = 'message message-bot';
                                botMessage.textContent = data.bot_response;
                                messagesContainer.appendChild(botMessage);
                                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                            }, 1000);
                        } else {
                            loadMessages();
                        }
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.error);
                    }
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            }
            
            function showError(elementId, message) {
                const element = document.getElementById(elementId);
                element.textContent = message;
                element.style.display = 'block';
                setTimeout(() => element.style.display = 'none', 5000);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            checkAuth();
        </script>
    </body>
    </html>
    '''

# API endpoints
@app.route('/api/login', methods=['POST'])
def api_login():
    """API –¥–ª—è –≤—Ö–æ–¥–∞"""
    try:
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')
        
        if not username or not password:
            return jsonify({'success': False, 'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'})
        
        db = get_db()
        cursor = db.cursor()
        
        cursor.execute(
            "SELECT id, username, password_hash FROM users WHERE username = ?", 
            (username,)
        )
        user = cursor.fetchone()
        
        if user and user['password_hash'] == hash_password(password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            db.close()
            return jsonify({'success': True, 'username': user['username']})
        else:
            db.close()
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'})

@app.route('/api/register', methods=['POST'])
def api_register():
    """API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        username = data.get('username')
        phone = data.get('phone')
        password = data.get('password')
        confirm = data.get('confirm')
        
        if not all([username, phone, password, confirm]):
            return jsonify({'success': False, 'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'})
        
        if password != confirm:
            return jsonify({'success': False, 'error': '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'})
        
        if len(password) < 4:
            return jsonify({'success': False, 'error': '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞)'})
        
        db = get_db()
        cursor = db.cursor()
        
        try:
            password_hash = hash_password(password)
            cursor.execute(
                "INSERT INTO users (username, phone, password_hash) VALUES (?, ?, ?)",
                (username, phone, password_hash)
            )
            db.commit()
            db.close()
            return jsonify({'success': True, 'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.'})
        
        except sqlite3.IntegrityError:
            db.close()
            return jsonify({'success': False, 'error': '–õ–æ–≥–∏–Ω –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç—ã'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞: {str(e)}'})

@app.route('/api/users')
def api_users():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if 'user_id' not in session:
            return jsonify({'success': False, 'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401
        
        db = get_db()
        cursor = db.cursor()
        
        cursor.execute(
            "SELECT id, username, phone FROM users WHERE id != ? ORDER BY username",
            (session['user_id'],)
        )
        users = cursor.fetchall()
        db.close()
        
        users_data = [dict(user) for user in users]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ò-–±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if AI_BOT_ENABLED:
            users_data.insert(0, {
                'id': AI_BOT_ID,
                'username': AI_BOT_NAME,
                'phone': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
            })
        
        return jsonify({'success': True, 'users': users_data})
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'})

@app.route('/api/messages')
def api_messages():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if 'user_id' not in session:
            return jsonify({'success': False, 'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401
        
        other_user_id = request.args.get('user_id')
        if not other_user_id:
            return jsonify({'success': False, 'error': '–£–∫–∞–∂–∏—Ç–µ user_id'}), 400
        
        # –î–ª—è —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if int(other_user_id) == AI_BOT_ID:
            return jsonify({'success': True, 'messages': []})
        
        db = get_db()
        cursor = db.cursor()
        
        cursor.execute('''
            SELECT m.id, m.sender_id, m.receiver_id, m.message_text, m.created_at, 
                   u.username as sender_name
            FROM messages m
            JOIN users u ON m.sender_id = u.id
            WHERE (m.sender_id = ? AND m.receiver_id = ?) 
               OR (m.sender_id = ? AND m.receiver_id = ?)
            ORDER BY m.created_at
        ''', (session['user_id'], other_user_id, other_user_id, session['user_id']))
        
        messages = cursor.fetchall()
        db.close()
        
        messages_data = [{
            'id': msg['id'],
            'sender_id': msg['sender_id'],
            'receiver_id': msg['receiver_id'],
            'message_text': msg['message_text'],
            'created_at': msg['created_at'],
            'sender_name': msg['sender_name'],
            'is_own': msg['sender_id'] == session['user_id']
        } for msg in messages]
        
        return jsonify({'success': True, 'messages': messages_data})
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'})

@app.route('/api/send_message', methods=['POST'])
def api_send_message():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if 'user_id' not in session:
            return jsonify({'success': False, 'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401
        
        data = request.get_json()
        receiver_id = data.get('receiver_id')
        message_text = data.get('message_text', '').strip()
        
        if not receiver_id or not message_text:
            return jsonify({'success': False, 'error': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'}), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò-–±–æ—Ç–∞
        if int(receiver_id) == AI_BOT_ID:
            bot_response = ai_bot_response(message_text)
            return jsonify({
                'success': True, 
                'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                'bot_response': bot_response
            })
        
        db = get_db()
        cursor = db.cursor()
        
        cursor.execute(
            "INSERT INTO messages (sender_id, receiver_id, message_text) VALUES (?, ?, ?)",
            (session['user_id'], receiver_id, message_text)
        )
        db.commit()
        db.close()
        return jsonify({'success': True, 'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
            
    except Exception as e:
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'}), 500

@app.route('/api/logout')
def api_logout():
    """API –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
    session.clear()
    return jsonify({'success': True})

@app.route('/api/check_auth')
def api_check_auth():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if 'user_id' in session:
        return jsonify({'success': True, 'username': session['username']})
    return jsonify({'success': False})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print("üöÄ Web Messenger –∑–∞–ø—É—â–µ–Ω!")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üîë –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: alex/password123, maria/password123, ivan/password123")
    print("ü§ñ –ò–ò-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    app.run(host='0.0.0.0', port=port, debug=True)
