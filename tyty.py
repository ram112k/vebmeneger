import sqlite3
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime
import hashlib

class MessengerWithAuth:
    def __init__(self, root):
        self.root = root
        self.root.title("üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
        self.root.geometry("900x700")
        self.current_user = None
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.setup_database()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.show_auth_window()
        
    def setup_database(self):
        """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        self.conn = sqlite3.connect('messenger.db')
        self.cursor = self.conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                phone TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sender_id INTEGER NOT NULL,
                receiver_id INTEGER NOT NULL,
                message_text TEXT NOT NULL,
                is_read INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (sender_id) REFERENCES users (id),
                FOREIGN KEY (receiver_id) REFERENCES users (id)
            )
        ''')
        
        self.conn.commit()
    
    def hash_password(self, password):
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    def show_auth_window(self):
        """–û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.auth_window = tk.Toplevel(self.root)
        self.auth_window.title("–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        self.auth_window.geometry("400x500")
        self.auth_window.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.auth_window.transient(self.root)
        self.auth_window.grab_set()
        
        # –°—Ç–∏–ª–∏
        title_font = ("Arial", 16, "bold")
        label_font = ("Arial", 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(self.auth_window, text="üîê –í—Ö–æ–¥ –≤ –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", 
                font=title_font, pady=20).pack()
        
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–æ—Ä–º—ã
        form_frame = ttk.Frame(self.auth_window, padding=20)
        form_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        tk.Label(form_frame, text="–õ–æ–≥–∏–Ω:", font=label_font).grid(row=0, column=0, sticky=tk.W, pady=5)
        self.login_entry = ttk.Entry(form_frame, width=30)
        self.login_entry.grid(row=0, column=1, pady=5, padx=5)
        
        # –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        tk.Label(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:", font=label_font).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.phone_entry = ttk.Entry(form_frame, width=30)
        self.phone_entry.grid(row=1, column=1, pady=5, padx=5)
        
        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        tk.Label(form_frame, text="–ü–∞—Ä–æ–ª—å:", font=label_font).grid(row=2, column=0, sticky=tk.W, pady=5)
        self.password_entry = ttk.Entry(form_frame, width=30, show="*")
        self.password_entry.grid(row=2, column=1, pady=5, padx=5)
        
        # –ü–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        tk.Label(form_frame, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:", font=label_font).grid(row=3, column=0, sticky=tk.W, pady=5)
        self.confirm_entry = ttk.Entry(form_frame, width=30, show="*")
        self.confirm_entry.grid(row=3, column=1, pady=5, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(form_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=20)
        
        ttk.Button(button_frame, text="–í–æ–π—Ç–∏", command=self.login).pack(side=tk.LEFT, padx=10)
        ttk.Button(button_frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", command=self.register).pack(side=tk.LEFT, padx=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.auth_status = tk.StringVar()
        self.auth_status.set("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        tk.Label(self.auth_window, textvariable=self.auth_status, 
                fg="blue", font=("Arial", 9)).pack(pady=10)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º Enter —Å –≤—Ö–æ–¥–æ–º
        self.password_entry.bind('<Return>', lambda e: self.login())
    
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.login_entry.get().strip()
        phone = self.phone_entry.get().strip()
        password = self.password_entry.get()
        confirm = self.confirm_entry.get()
        
        if not all([username, phone, password, confirm]):
            self.auth_status.set("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        if password != confirm:
            self.auth_status.set("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return
        
        if len(password) < 4:
            self.auth_status.set("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 4 —Å–∏–º–≤–æ–ª–∞)!")
            return
        
        try:
            password_hash = self.hash_password(password)
            self.cursor.execute(
                "INSERT INTO users (username, phone, password_hash) VALUES (?, ?, ?)",
                (username, phone, password_hash)
            )
            self.conn.commit()
            
            self.auth_status.set("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            self.phone_entry.delete(0, tk.END)
            self.confirm_entry.delete(0, tk.END)
            
        except sqlite3.IntegrityError:
            self.auth_status.set("–õ–æ–≥–∏–Ω –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç—ã!")
        except Exception as e:
            self.auth_status.set(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def login(self):
        """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = self.login_entry.get().strip()
        password = self.password_entry.get()
        
        if not username or not password:
            self.auth_status.set("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")
            return
        
        try:
            password_hash = self.hash_password(password)
            self.cursor.execute(
                "SELECT id, username, phone FROM users WHERE username = ? AND password_hash = ?",
                (username, password_hash)
            )
            user = self.cursor.fetchone()
            
            if user:
                self.current_user = {
                    'id': user[0],
                    'username': user[1],
                    'phone': user[2]
                }
                self.auth_window.destroy()
                self.create_main_window()
                self.load_messages()
            else:
                self.auth_status.set("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
                
        except Exception as e:
            self.auth_status.set(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
        # –û—á–∏—â–∞–µ–º root window
        for widget in self.root.winfo_children():
            widget.destroy()
        
        self.root.title(f"üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä - {self.current_user['username']}")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        user_info = f"üë§ {self.current_user['username']} ({self.current_user['phone']})"
        tk.Label(header_frame, text=user_info, font=("Arial", 14, "bold")).pack(side=tk.LEFT)
        
        ttk.Button(header_frame, text="üö™ –í—ã–π—Ç–∏", command=self.logout).pack(side=tk.RIGHT)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        paned_window = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        paned_window.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        left_frame = ttk.Frame(paned_window, padding="5")
        paned_window.add(left_frame, weight=1)
        
        tk.Label(left_frame, text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", font=("Arial", 12, "bold")).pack(anchor=tk.W, pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_frame = ttk.Frame(left_frame)
        users_frame.pack(fill=tk.BOTH, expand=True)
        
        self.users_tree = ttk.Treeview(users_frame, columns=("username", "phone"), show="headings", height=15)
        self.users_tree.heading("username", text="–ò–º—è")
        self.users_tree.heading("phone", text="–¢–µ–ª–µ—Ñ–æ–Ω")
        self.users_tree.column("username", width=120)
        self.users_tree.column("phone", width=100)
        
        users_scrollbar = ttk.Scrollbar(users_frame, orient=tk.VERTICAL, command=self.users_tree.yview)
        self.users_tree.configure(yscrollcommand=users_scrollbar.set)
        
        self.users_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        users_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–æ–æ–±—â–µ–Ω–∏—è
        right_frame = ttk.Frame(paned_window, padding="5")
        paned_window.add(right_frame, weight=2)
        
        tk.Label(right_frame, text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", font=("Arial", 12, "bold")).pack(anchor=tk.W, pady=(0, 10))
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        messages_frame = ttk.Frame(right_frame)
        messages_frame.pack(fill=tk.BOTH, expand=True)
        
        self.messages_text = scrolledtext.ScrolledText(messages_frame, wrap=tk.WORD, height=20)
        self.messages_text.pack(fill=tk.BOTH, expand=True)
        self.messages_text.config(state=tk.DISABLED)
        
        # –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_frame = ttk.Frame(right_frame)
        send_frame.pack(fill=tk.X, pady=(10, 0))
        
        tk.Label(send_frame, text="–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:").pack(anchor=tk.W)
        
        self.message_entry = tk.Text(send_frame, height=3, width=50)
        self.message_entry.pack(fill=tk.X, pady=5)
        
        ttk.Button(send_frame, text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message).pack()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.load_users()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.users_tree.bind('<<TreeviewSelect>>', self.on_user_select)
    
    def load_users(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)
        
        self.cursor.execute("SELECT id, username, phone FROM users WHERE id != ?", 
                          (self.current_user['id'],))
        users = self.cursor.fetchall()
        
        for user in users:
            self.users_tree.insert("", "end", values=(user[1], user[2]), tags=(user[0],))
    
    def on_user_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_tree.selection()
        if selection:
            item = self.users_tree.item(selection[0])
            self.selected_user_id = self.users_tree.item(selection[0], "tags")[0]
            self.load_messages()
    
    def load_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if not hasattr(self, 'selected_user_id'):
            return
        
        self.messages_text.config(state=tk.NORMAL)
        self.messages_text.delete(1.0, tk.END)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        self.cursor.execute('''
            SELECT u.username, m.message_text, m.created_at 
            FROM messages m 
            JOIN users u ON m.sender_id = u.id 
            WHERE (m.sender_id = ? AND m.receiver_id = ?) 
               OR (m.sender_id = ? AND m.receiver_id = ?)
            ORDER BY m.created_at
        ''', (self.current_user['id'], self.selected_user_id, 
              self.selected_user_id, self.current_user['id']))
        
        messages = self.cursor.fetchall()
        
        for username, message, time in messages:
            time_str = datetime.strptime(time, "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
            prefix = "‚ñ∂Ô∏è –í—ã: " if username == self.current_user['username'] else f"‚óÄÔ∏è {username}: "
            self.messages_text.insert(tk.END, f"[{time_str}] {prefix}{message}\n\n")
        
        self.messages_text.config(state=tk.DISABLED)
        self.messages_text.see(tk.END)
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not hasattr(self, 'selected_user_id'):
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        message_text = self.message_entry.get("1.0", tk.END).strip()
        if not message_text:
            return
        
        try:
            self.cursor.execute(
                "INSERT INTO messages (sender_id, receiver_id, message_text) VALUES (?, ?, ?)",
                (self.current_user['id'], self.selected_user_id, message_text)
            )
            self.conn.commit()
            
            self.message_entry.delete("1.0", tk.END)
            self.load_messages()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        for widget in self.root.winfo_children():
            widget.destroy()
        self.show_auth_window()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = MessengerWithAuth(root)
    app.run()
